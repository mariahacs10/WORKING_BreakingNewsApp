12/18/2023

What was the issue?:

When i searched the news article it would display but then, when i taped on a certain article it would crash.
These are the step by step notes on how i got it to work.

(This is going to cover for both breakingnews and searchnews since searchnews uses classes inside the breakingnews)
------------------------------------------------------------------------------------------------------------

Step by Step explanation:

1.Do your internet permisson in the manifest file, And get all your dependincies in the build.gradle file
(Go into  build.gradle file and you'll see all the dependincies needed)

2.You should have your Article, ArticleViewModel, NewsApiInterface and NewsResponse etc already set up in the breakingNews notes
if not referto the breakingNews notes

3.CREATE YOUR SEARCH SCREEN, In the SearchNews you want to set up the search functinality and etc:

// This is a Composable function that handles navigation within the app.
@Composable
fun AppNavigator2(viewModel: ArticleViewModel) {
    // Creates a NavController to handle navigation
    val navController = rememberNavController()

    // NavHost manages navigation between different destinations
    NavHost(navController, startDestination = "articleList") {
        // Destination to show list of articles
        composable("articleList") {
            SearchNews(viewModel, navController)
        }

        // Destination to show full article
        composable("fullArticle") {
            FullArticleScreenSearch(viewModel)
        }
    }
}


// This Composable function displays the full article using a WebView.
@Composable
fun FullArticleScreenSearch(viewModel: ArticleViewModel) {
    // Get selected article from view model
    val article = viewModel.selectedArticle.value

    Box(modifier = Modifier.fillMaxSize()) {
        // Show article content in WebView
        AndroidView(factory = { ctx ->
            WebView(ctx).apply {
                layoutParams = ViewGroup.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.MATCH_PARENT
                )
                webViewClient = WebViewClient()
                article?.url?.let { loadUrl(it) }
            }
        }, update = { view ->
            viewModel.selectedArticle.value?.url?.let { view.loadUrl(it) }
        })
        val context = LocalContext.current

        FloatingActionButton(
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(bottom = 78.dp),
            //This makes the heart clickable
            //and saved to the database
            onClick = {  article?.let {
                viewModel.saveArticle(it)
                Toast.makeText(context, "Article Saved", Toast.LENGTH_SHORT).show()

            }}
        ) {
            Icon(
                imageVector = Icons.Default.Favorite,
                contentDescription = "Save Article"
            )
        }
    }
}



// Card to display single article
@Composable
fun SearchNewsCard(
    navController: NavController,
    article: Article,
    viewModel: ArticleViewModel

) {

    // Clicking card navigates to full article screen
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(18.dp)
            .clickable {
                //The clickable modifier makes the element clickable by detecting click events.
                // here it is added to the Card composable.
                viewModel.selectedArticle.value = article
                /**This line updates the selectedArticle state in the ArticleViewModel viewModel to the current article being displayed. So when the card is clicked, it will save a
                 * reference to that article object in the view model.*/
                navController.navigate("fullArticle")
            }
    ) {

        Column(modifier = Modifier.fillMaxSize()) {
            CoilImage(
                imageUrl = article.urlToImage ?: "",
                contentDescription = article.title,
                modifier = Modifier
                    .size(300.dp, 300.dp)
            )

            Spacer(modifier = Modifier.height(8.dp))

            article.title?.let { Text(text = it, style = MaterialTheme.typography.bodyMedium) }

            Spacer(modifier = Modifier.height(8.dp))

            article.description?.let { Text(text = it) }
        }
    }
}




/**6. This @Composable function displays a list of news articles. It uses a LazyColumn to display a list of BreakingNewsCard*/
@Composable
fun SearchNewsList(navController: NavController, articles: List<Article>, viewModel: ArticleViewModel) {
    // LazyColumn displays list of cards
    LazyColumn {
        items(articles) { article ->
            SearchNewsCard(navController, article, viewModel)
        }
    }
}



@Composable
fun SearchNews(
    viewModel: ArticleViewModel,
    navController: NavController
) {
   var searchQuery by remember { mutableStateOf("") }

    val articles = remember { mutableStateOf<List<Article>>(emptyList()) }
    LaunchedEffect(searchQuery) {
        if (searchQuery.isNotEmpty()) {
            val response = RetrofitInstanceClass.api.searchForNews(searchQuery)
            articles.value = response.body()?.articles ?: emptyList()
        }
    }


    Column(modifier = Modifier.fillMaxSize()) {
        EditTextMethod(
            searchQuery = searchQuery,
            onSearchQueryChange = { searchQuery = it }
        )
        SearchNewsList(navController, articles.value, viewModel)
    }
}

/**In EditTextMethod.kt, add a parameter for the search query and update the TextField accordingly:*/
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun EditTextMethod(searchQuery: String, onSearchQueryChange: (String) -> Unit) {

    TextField(
        value = searchQuery,
        onValueChange = onSearchQueryChange,
        placeholder = { Text("Search...") },
        modifier = Modifier
            .fillMaxWidth(),
        textStyle = TextStyle.Default.copy(fontSize = 18.sp)

    )
}

12.In the MainActivity you want to set up your bottom navigation, and also get the BreakingNews and SearchNews to display:
@Composable
fun NavigationHost(navController: NavHostController, viewModel: ArticleViewModel)
{

    NavHost(navController = navController, startDestination = NavRoutes.BreakingNews.route) {
        composable(NavRoutes.BreakingNews.route) {

            AppNavigator(viewModel)
        }

        Dont worry about this yet:
        composable(NavRoutes.SavedNews.route) {
            AppNavigator3(viewModel)
        }
        composable(NavRoutes.SearchNews.route) {
            AppNavigator2(viewModel)
        }
    }
}

