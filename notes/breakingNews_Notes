12/13/2023

What was the issue?:

I faced a issue that when i tapped on a article it would crash/ through an error, I was not sure on how to make a composables clickable nor did
i know how to display the articles details screen / website, In these notes i'll show how i made the composable / article clickable and display
the articles details / website using , .clickable{}, viewmodels and webview. Also having a floating action button

Here is the full step by step implementation


------------------------------------------------------------------------------------------------------------

Step by Step explanation


1.Do your internet permisson in the manifest file, And get all your dependincies in the build.gradle file
(Go into my build.gradle file and you'll see all the dependincies needed)

2.You want to create a package called models, And in there you should create a new class called
NewsResponse and this is going to take the response of the article:

data class NewsResponse(
    val articles: MutableList<Article>,
    val status: String,
    val totalResults: Int
)

3.You want to get that list of articles and all the details it will have like the url, urlToImage etc:

@Entity(
    tableName = "article"
)
data class Article(
    // Primary key will auto generate unique IDs
    //(if any)
    @PrimaryKey(autoGenerate = true)
    var id: Int? = null,

    // Fields mapped to table columns
    val author: String?,
    val content: String?,
    val description: String?,
    val publishedAt: String?,
    val title: String?,
    val url: String?,
    val urlToImage: String?,

    // Local flag for saved state
    var isSaved: Boolean = false
) : Serializable


4.You need to create another class called Source and in there you'll have the name and id
(You wont really need this but you have to have it):

data class Source(
    val id: String,
    val name: String
)

5.Create your Class ArticleViewModel this will handle when you select a article and also the deleting and saving aspect:


class ArticleViewModel(private val repository: ArticleRepository) : ViewModel() {

    // Selected article for UI state
    val selectedArticle = MutableLiveData<Article>()

    // Get saved articles from repository
    private val _savedArticles = repository.getSavedArticles()

    // Expose as read-only livedata
    val savedArticles: LiveData<List<Article>> = _savedArticles

    // Launch coroutine to call repository
    fun saveArticle(article: Article) = viewModelScope.launch {
        repository.insertArticle(article)
    }

    fun deleteArticle(article: Article) {
        viewModelScope.launch {
            repository.deleteArticle(article)
        }
    }

}

6.Create your api package, Then create the Interface class , the interface will be called NewsApiInterface
it'll take getBreakingNews and searchNews, Which search news is implemented but we won't be using it because it doesnt work
yet:
interface NewsApiInterface {

    @GET("v2/top-headlines")
    suspend fun getBreakingNews(
        @Query("country")
        countryCode: String = "us",
        @Query("page")
        pageNumber: Int = 1,
        @Query("apiKey")
        apiKey: String = BuildConfig.NEWS_API_KEY
    ): Response<NewsResponse>

    /**DONT FORGET! to put the searchnews inside the interface:*/
    @GET("v2/everything")
    suspend fun searchForNews(
        @Query("q")
        searchQuery: String,
        @Query("page")
        pageNumber: Int = 1,
        @Query("apiKey")
        apiKey: String = BuildConfig.NEWS_API_KEY
    ): Response<NewsResponse>
}

7.Create the class RetrofitInstanceClass which will hold the baseUrl and the api calls:

class RetrofitInstanceClass {
    companion object{

         val retrofit by lazy {

            val logging = HttpLoggingInterceptor()
            logging.setLevel(HttpLoggingInterceptor.Level.BODY)
            val client = OkHttpClient.Builder()
                .addInterceptor(logging)
                .build()

            Retrofit.Builder()
                .baseUrl("https://newsapi.org")
                .addConverterFactory(GsonConverterFactory.create())
                .client(client)
                .build()
        }

        val api by lazy {
            retrofit.create(NewsApiInterface::class.java)
        }
    }
}

8.Now your going to implement the bottom navigation create a package called navigation and in there you
want to create the sealed class NavRoutes, in here you'll have 3 destinations:

sealed class NavRoutes(val route: String) {
    object BreakingNews : NavRoutes("Breaking News")
    object SavedNews : NavRoutes("Saved News")
    object SearchNews : NavRoutes("Search News")

}

9.Now you want to create an object class called NavBarItems and this will be how your bottom nav is styled:
object NavBarItems {
    val BarItems = listOf(
        BarItem(
            title = "Breaking News",
            image = Icons.Filled.Warning,
            route = "Breaking News"
        ),
        BarItem(
            title = "Saved News",
            image = Icons.Filled.Favorite,
            route = "Saved News"
        ),
        BarItem(
            title = "Search News",
            image = Icons.Filled.Menu,
            route = "Search News"
        )
    )
}

10.Create your class BarItem and this will be what is in the bottom nav:

data class BarItem(
    val title: String,
    val image: ImageVector,
    val route: String
)

11.CREATE YOUR SCREENS!, You want to have another package called screens and in here you'll have BreakingNews , SearchNews and
SavedNews, In the BreakingNews is the MOST important this is where your breakingNews article is going
to be and where your going to set up all your webviews and stuff:

/**1.This function navigates to the full article screen when an article is clicked. */
@Composable
fun AppNavigator(viewModel: ArticleViewModel) {
    // Creates a NavController to handle navigation
    val navController = rememberNavController()

    // NavHost manages navigation between different destinations
    NavHost(navController, startDestination = "articleList") {
        // Destination to show list of articles
        composable("articleList") {
            BreakingNews(navController, viewModel)
        }

        // Destination to show full article
        composable("fullArticle") {
            FullArticleScreen(viewModel)
        }
    }
}

// Shows full article using WebView
@Composable
fun FullArticleScreen(viewModel: ArticleViewModel) {
    // Get selected article from view model
    val article = viewModel.selectedArticle.value

    Box(modifier = Modifier.fillMaxSize()) {
        // Show article content in WebView
        AndroidView(factory = { ctx ->
            WebView(ctx).apply {
                layoutParams = ViewGroup.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.MATCH_PARENT
                )
                webViewClient = WebViewClient()
                article?.url?.let { loadUrl(it) }
            }
        }, update = { view ->
            viewModel.selectedArticle.value?.url?.let { view.loadUrl(it) }
        })
        val context = LocalContext.current

        FloatingActionButton(
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(bottom = 78.dp),
          //This makes the heart clickable
            //and saved to the database
            onClick = {  article?.let {
                viewModel.saveArticle(it)
                Toast.makeText(context, "Article Saved", Toast.LENGTH_SHORT).show()
            }}
        ) {
            Icon(
                imageVector = Icons.Default.Favorite,
                contentDescription = "Save Article"
            )
        }
    }
}


// Card to display single article
@Composable
fun BreakingNewsCard(
    navController: NavController,
    article: Article,
    viewModel: ArticleViewModel

) {

    // Clicking card navigates to full article screen
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(18.dp)
            .clickable {
                //The clickable modifier makes the element clickable by detecting click events.
                // here it is added to the Card composable.
                viewModel.selectedArticle.value = article
                /**This line updates the selectedArticle state in the ArticleViewModel viewModel to the current article being displayed. So when the card is clicked, it will save a
                 * reference to that article object in the view model.*/
                navController.navigate("fullArticle")
            }
    ) {

        Column(modifier = Modifier.fillMaxSize()) {
            CoilImage(
                imageUrl = article.urlToImage ?: "",
                contentDescription = article.title,
                modifier = Modifier
                    .size(300.dp, 300.dp)
            )

            Spacer(modifier = Modifier.height(8.dp))

            article.title?.let { Text(text = it, style = MaterialTheme.typography.bodyMedium) }

            Spacer(modifier = Modifier.height(8.dp))

            article.description?.let { Text(text = it) }
        }
    }
}


/**5. This @Composable function displays an image using the Coil library.*/
@OptIn(ExperimentalCoilApi::class)
@Composable
fun CoilImage(imageUrl: String, contentDescription: String?, modifier: Modifier = Modifier) {
    val painter = rememberImagePainter(imageUrl)

    Image(
        painter = painter,
        contentDescription = contentDescription,
        modifier = modifier
    )
}

/**6. This @Composable function displays a list of news articles. It uses a LazyColumn to display a list of BreakingNewsCard*/
@Composable
fun BreakingNewsList(navController: NavController, articles: List<Article>, viewModel: ArticleViewModel) {
    // LazyColumn displays list of cards
    LazyColumn(modifier = Modifier.fillMaxSize()) {
        items(articles) { article ->
            BreakingNewsCard(navController, article, viewModel)
        }
    }
}


/**7. This @Composable function fetches the breaking news articles and displays them using the BreakingNewsList composable*/
@Composable
fun BreakingNews(navController: NavController, viewModel: ArticleViewModel) {

    val articles = remember { mutableStateOf<List<Article>>(emptyList()) }

    // Fetch articles
    LaunchedEffect(Unit) {
        val response = RetrofitInstanceClass.api.getBreakingNews()
        articles.value = response.body()?.articles ?: emptyList()
    }

    // Display list of articles
    BreakingNewsList(navController, articles.value, viewModel)
}

12.In the MainActivity you want to set up your bottom navigation and also get the BreakingNews composable displayed:

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)


        // Create an instance of ArticleRepository to access database
        val repository = ArticleRepository(applicationContext)

        // ViewModelFactory will create ArticleViewModels with the repository
        val viewModelFactory = ArticleViewModelFactory(repository)

        // Get instance of ArticleViewModel from the factory
        // This ViewModel has access to the repository for data
        val viewModel = ViewModelProvider(this, viewModelFactory)
            .get(ArticleViewModel::class.java)

        // Set Compose UI content
        setContent {
            // Pass ViewModel to top level composable
            MainScreen(viewModel)
        }
    }
}

// Simple ViewModel factory provides repository to constructor
class ArticleViewModelFactory(
    private val repository: ArticleRepository
) : ViewModelProvider.Factory {

    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        return ArticleViewModel(repository) as T
    }

}


/** Working with the Scaffold component
The final task before testing the project is to complete the layout in the
MainScreen function. For this, we will use the Compose Scaffold.

(What is Scaffold?:  layout structure for organizing UI elements on the screen
responsively)
 */


@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainScreen(viewModel: ArticleViewModel) {
    val navController = rememberNavController()

    Scaffold(

        content = {
            Column(
                Modifier
                    .fillMaxSize()) {
                NavigationHost(navController = navController, viewModel)

            } },
        bottomBar = {
            BottomNavigationBar(navController = navController)
        }
    )

}

@Composable
fun NavigationHost(navController: NavHostController, viewModel: ArticleViewModel)
{

    NavHost(navController = navController, startDestination = NavRoutes.BreakingNews.route) {
        composable(NavRoutes.BreakingNews.route) {

            AppNavigator(viewModel)
        }

        composable(NavRoutes.SavedNews.route) {
            AppNavigator3(viewModel)
        }
        composable(NavRoutes.SearchNews.route) {
            AppNavigator2(viewModel)
        }
    }
}


@Composable
fun BottomNavigationBar(navController: NavHostController){
    NavigationBar {
        val backStackEntry by navController.currentBackStackEntryAsState()

        val currentRoute =
            backStackEntry?.destination?.route

        NavBarItems.BarItems.forEach { navItem ->
            NavigationBarItem(
                selected = currentRoute ==
                        navItem.route,
                onClick = {
                    navController.navigate(navItem.
                    route) {
                        popUpTo(navController.graph.
                        findStartDestination().id) {
                            saveState = true
                        }
                        launchSingleTop = true
                        restoreState = true
                    }
                },
                icon = {
                    Icon(imageVector =
                    navItem.image,
                        contentDescription =
                        navItem.title)
                },
                label = {
                    Text(text = navItem.title)
                },
            )
        }
    }
}
